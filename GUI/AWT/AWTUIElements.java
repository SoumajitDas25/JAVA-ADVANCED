package GUI.AWT;

import java.awt.*;

public class AWTUIElements
{
    public static void main(String[] args)
    {
        Frame frame = new Frame("My Frame");
        frame.setSize(600,600);
        frame.setLayout(new FlowLayout());
        //frame.setLayout(null);
        //when we are using setLayout(null), we are basically using no layout manager and so we have to position and resize every component manually using setBounds().

        //Label:
        //Does not create any event
        //text cannot be changed by end user but only by the application programmer
        Label label = new Label("My label");
        System.out.println(label.getText()); //returns the label text
        label.setText("My label text"); //sets the label text
        frame.add(label);

        //TextField:
        //Allows the user to edit single line of text.
        //Event is generated by user typing in textfield
        TextField field = new TextField(10);
        field.setText("My Field"); //sets field text
        System.out.println(field.getText()); //returns field text
        frame.add(field);

        //Button:
        //Event is generated when button is pressed/released
        Button button = new Button("My Button");
        frame.add(button);

        //Checkbox:
        //Used to turn an option true or false
        //Java does not have radiobutton class in AWT
        //we can create radiobutton with the help of checkbox
        //creating 2 checkboxes(both can also be checked or unchecked simultaneously)
        Checkbox check1 = new Checkbox("Check 1",false);
        Checkbox check2 = new Checkbox("Check 1",true);
        frame.add(check1);
        frame.add(check2);
        //creating 2 radiobuttons(only one can be checked at a time)
        CheckboxGroup checkGroup = new CheckboxGroup();
        Checkbox check3 = new Checkbox("Check 1",checkGroup,false);
        Checkbox check4 = new Checkbox("Check 2",checkGroup,true);
        frame.add(check3);
        frame.add(check4);

        //List:
        //Represents a list of text items
        //User can select either one or multiple items
        List list = new List(3,true); //by passing true we enable user to select multiple items
        list.add("Item 1");
        list.add("Item 2");
        list.add("Item 3");
        frame.add(list);

        //Choice:
        //Used to show popup menu of choices
        //Selected choice is shown on the top of menu
        Choice choice = new Choice();
        choice.add("Choice 1");
        choice.add("Choice 2");
        choice.add("Choice 3");
        frame.add(choice);

        //TextArea:
        //Provides a multiline editor area
        //When the text in the textarea becomes larger than the viewable area, then the scrollbar is automatically appeared.
        TextArea textArea = new TextArea(5,50);
        frame.add(textArea);

        //MenuBar:
        //Contains a list of menus where each menu can contain a list of menu items
        MenuBar menuBar = new MenuBar(); //creating menubar
        Menu menu1 = new Menu("Menu 1"); //creating menus
        Menu menu2 = new Menu("Menu 2");
        menu1.add(new MenuItem("MenuItem 1")); //creating menuitems & adding them to the menu
        menu1.add(new MenuItem("MenuItem 2"));
        menu2.add(new MenuItem("MenuItem 1"));
        menu2.add(new MenuItem("MenuItem 2"));
        menuBar.add(menu1); //adding menus to the menubar
        menuBar.add(menu2);
        frame.setMenuBar(menuBar);

        //Scrollbar:
        //It can be Horizontal scrollbar or Vertical Scrollbar
        Scrollbar scollbar = new Scrollbar();
        scollbar.setOrientation(Scrollbar.HORIZONTAL); //creating horizontal scrollbar
        frame.add(scollbar);

        frame.setVisible(true);
    }
}
