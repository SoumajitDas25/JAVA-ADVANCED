package EventHandling;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class ListenersExample
{
    public static void main(String[] args)
    {
        JFrame frame = new JFrame("My Frame");
        frame.setSize(500,500);
        frame.setLayout(new FlowLayout());
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        //ActionListener:
        //used for event: ActionEvent
        //event generated by sources: Buttons, MenuItems
        //event caused when: user performs an action(eg- button click)
        //functional interface(lambdas can be used)
        //method to override: void actionPerformed(ActionEvent e)
        JButton button = new JButton("My Button");
        button.addActionListener(new ActionListener() { //registering button to ActionListener
            //we can either make this class to implement ActionListener interface and override this method or we can create anonymous inner class and override it or can use lambda expression
            @Override
            public void actionPerformed(ActionEvent e)
            {
                System.out.println("Value of button: "+e.getActionCommand());
            }
        });
        frame.add(button);

        //ItemListener:
        //used for event: ItemEvent
        //event generated by sources: RadioButton, List, Choice and Checkbox
        //event caused when: Item is selected/ deselected
        //functional interface(lambdas can be used)
        //method to override: void itemStateChanged(ItemEvent e)
        Checkbox check = new Checkbox("Check 1");
        check.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e)
            {
                System.out.println(check.getState()); //returns the selection state in boolean
            }
        });
        frame.add(check);

        //KeyListener:
        //used for event: KeyEvent
        //event generated by sources: any component with focus
        //event caused when: key typed, pressed or released
        //not a functional interface(lambdas can't be used)
        //methods to override:
        //1. void keyTyped(KeyEvent e)
        //2. void keyPressed(KeyEvent e)
        //3. void keyReleased(KeyEvent e)
        JTextField field = new JTextField(20);
        field.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e)
            {
                System.out.println("Key Typed: "+e.getKeyChar());
            }

            @Override
            public void keyPressed(KeyEvent e) { //even if we don't need these methods but still we need to override them since they belong to an interface
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });
        frame.add(field);

        //MouseListener:
        //used for event: MouseEvent
        //event generated by sources: any component
        //event caused when: mouse clicked, entered, exited, etc
        //not a functional interface(lambdas can't be used)
        //methods to override:
        //1. void mouseClicked(MouseEvent e)
        //2. void mousePressed(MouseEvent e)
        //3. void mouseReleased(MouseEvent e)
        //4. void mouseEntered(MouseEvent e)
        //5. void mouseExited(MouseEvent e)
        frame.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                System.out.println("Mouse Clicked!");
            }

            @Override
            public void mousePressed(MouseEvent e) {
                System.out.println("Mouse Pressed!");
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                System.out.println("Mouse Released!");
            }

            @Override
            public void mouseEntered(MouseEvent e) { //triggers when mouse enters the source region
                System.out.println("Mouse Entered!");
            }

            @Override
            public void mouseExited(MouseEvent e) { //triggers when mouse leaves/exits the source region
                System.out.println("Mouse Exited!");
            }
        });

        //MouseMotionListener:
        //used for event: MouseEvent
        //event generated by sources: any component
        //event caused when: mouse moved or dragged
        //not a functional interface(lambdas can't be used)
        //methods to override:
        //1. void mouseMoved(MouseEvent e)
        //2. void mouseDragged(MouseEvent e)
        frame.addMouseMotionListener(new MouseMotionListener() {
            @Override
            public void mouseMoved(MouseEvent e) {
                System.out.println("Coordinates of mouse pointer: "+e.getX()+","+e.getY());
            }

            @Override
            public void mouseDragged(MouseEvent e) {

            }
        });

        //MouseWheelListener
        //used for event: MouseWheelEvent
        //event generated by sources: any component
        //event caused when: mouse wheel moved
        //functional interface(lambdas can be used)
        //method to override: void mouseWheelMoved(MouseWheelEvent e)
        frame.addMouseWheelListener(new MouseWheelListener() {
            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                System.out.println("Mouse Wheel Moved!");
            }
        });

        frame.setVisible(true);
    }
}